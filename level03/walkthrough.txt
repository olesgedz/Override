level03

If you look at source.c, it might look little bit frightening. In fact the program is doing 5 things:

It takes one input: an integer;
This integer is subtracted to 0x1337d00d (or decimal 322424845);
Then we have a switch cases with the subtraction result, cases are: 1, 2, 3, 4, 5, 6, 7, 8, 9, 16, 17, 18, 19, 20, 21 - each cases are calling decrypt with 1, 2, 3, and so on;
decrypt do XOR operation on each character of the string "Q}|u`sfg~sf{}|a3" with the subtraction result we get earlier;
Finally it compares the new string with "Congratulations!", if it matches: win!

0x08048673 <+19>:	movl   $0x757c7d51,-0x1d(%ebp)                     ; "Q}|u`sfg~sf{}|a". <- crypt
0x0804867a <+26>:	movl   $0x67667360,-0x19(%ebp)                     ; "`sfg~sf{}|a"
0x08048681 <+33>:	movl   $0x7b66737e,-0x15(%ebp)                     ; "~sf{}|a"
0x08048688 <+40>:	movl   $0x33617c7d,-0x11(%ebp)                     ;  "}|a"
0x0804868f <+47>:	movb   $0x0,-0xd(%ebp)                             ; "\0"
0x08048693 <+51>:	push   %eax

We know that our input must match one of the cases. Thus we can generate the list of integers to be tested:

>>> l = [1,2,3,4,5,6,7,8,9,16,17,18,19,20,21]
>>> a2 = 0x1337d00d
>>> a2
322424845
>>> for a1 in l:
...     print a2 - a1
...
322424844
322424843
322424842
322424841
322424840
322424839
322424838
322424837
322424836
322424829
322424828
322424827
322424826
322424825
322424824

correct one is 322424827
cat /home/users/level04/.pass
kgv3tkEb9h2mLkRsPkXRfc2mHbjMxQzvb2FrgKkf